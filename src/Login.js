import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import styled from 'styled-components';
import { useAuth } from './AuthContext';

const LoginContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
`;

const LoginForm = styled.div`
  background: white;
  padding: 40px;
  border-radius: 16px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
`;

const LoginTitle = styled.h1`
  color: #1e293b;
  text-align: center;
  margin-bottom: 32px;
  font-weight: 700;
`;

const PinInput = styled.input`
  width: 100%;
  padding: 16px;
  margin-bottom: 20px;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  font-size: 1.5rem;
  text-align: center;
  letter-spacing: 8px;
  font-weight: 600;
  transition: all 0.2s ease;
  background: #f8fafc;

  &:focus {
    outline: none;
    border-color: #64748b;
    box-shadow: 0 0 0 3px rgba(100, 116, 139, 0.1);
    background: white;
  }

  &::placeholder {
    color: #94a3b8;
    letter-spacing: 4px;
  }
`;

const LoginButton = styled.button`
  width: 100%;
  padding: 16px;
  background: linear-gradient(135deg, #475569 0%, #64748b 100%);
  color: white;
  border: none;
  border-radius: 12px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(71, 85, 105, 0.25);
  }

  &:active {
    transform: translateY(0);
  }

  &:disabled {
    background: #94a3b8;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
  }
`;

const ErrorMessage = styled.div`
  color: #ef4444;
  margin-top: 16px;
  text-align: center;
  font-weight: 500;
`;

const PinLabel = styled.div`
  text-align: center;
  color: #64748b;
  margin-bottom: 16px;
  font-size: 0.95rem;
`;

const PinHint = styled.div`
  text-align: center;
  color: #94a3b8;
  margin-top: 12px;
  font-size: 0.85rem;
`;

const TestPins = styled.div`
  margin-top: 20px;
  padding: 16px;
  background: #f1f5f9;
  border-radius: 8px;
  border-left: 4px solid #64748b;
`;

const TestPinsTitle = styled.div`
  font-weight: 600;
  color: #475569;
  margin-bottom: 8px;
  font-size: 0.9rem;
`;

const TestPinItem = styled.div`
  font-size: 0.85rem;
  color: #64748b;
  margin-bottom: 4px;
`;

function Login({ setToken }) {
  const [pinCode, setPinCode] = useState('');
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const { login } = useAuth();

  const handlePinChange = (e) => {
    const value = e.target.value.replace(/\D/g, ''); // р╕гр╕▒р╕Ър╣Ар╕Йр╕Юр╕▓р╕░р╕Хр╕▒р╕зр╣Ар╕ер╕В
    if (value.length <= 6) { // р╕Ир╕│р╕Бр╕▒р╕Фр╕Др╕зр╕▓р╕бр╕вр╕▓р╕зр╣Др╕бр╣Ир╣Ар╕Бр╕┤р╕Щ 6 р╕лр╕ер╕▒р╕Б
      setPinCode(value);
      setError(''); // р╕ер╣Йр╕▓р╕З error р╣Ар╕бр╕╖р╣Ир╕нр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Юр╕┤р╕бр╕Юр╣М
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    if (pinCode.length < 4) {
      setError('р╕Бр╕гр╕╕р╕Ур╕▓р╣Гр╕кр╣Ир╕гр╕лр╕▒р╕к PIN р╕нр╕вр╣Ир╕▓р╕Зр╕Щр╣Йр╕нр╕в 4 р╕лр╕ер╕▒р╕Б');
      setIsLoading(false);
      return;
    }

    try {
      const success = await login(pinCode);
      if (success) {
        // р╣Гр╕Кр╣Й token р╕Ир╕▓р╕Б AuthContext
        const token = localStorage.getItem('token');
        setToken(token);
        navigate('/dashboard');
      }
    } catch (err) {
      console.error('Login error:', err);
      setError(err.message || 'р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <LoginContainer>
      <LoginForm>
        <LoginTitle>р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ Helpdesk</LoginTitle>
        <PinLabel>р╕Бр╕гр╕╕р╕Ур╕▓р╣Гр╕кр╣Ир╕гр╕лр╕▒р╕к PIN</PinLabel>
        <form onSubmit={handleSubmit}>
          <PinInput
            type="password"
            placeholder="тАвтАвтАвтАвтАвтАв"
            value={pinCode}
            onChange={handlePinChange}
            maxLength={6}
            required
            autoFocus
          />
          <LoginButton type="submit" disabled={isLoading || pinCode.length < 4}>
            {isLoading ? 'р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ...' : 'р╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╕гр╕░р╕Ър╕Ъ'}
          </LoginButton>
          {error && <ErrorMessage>{error}</ErrorMessage>}
        </form>
        <PinHint>
          р╕гр╕лр╕▒р╕к PIN р╕Хр╣Йр╕нр╕Зр╕бр╕╡ 4-6 р╕лр╕ер╕▒р╕Б
        </PinHint>
        
        <TestPins>
          <TestPinsTitle>ЁЯФС р╕гр╕лр╕▒р╕к PIN р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Чр╕Фр╕кр╕нр╕Ъ:</TestPinsTitle>
          <TestPinItem>тАв 123456 - р╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ (Admin) - р╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╣Др╕Фр╣Й</TestPinItem>
          <TestPinItem>тАв 654321 - р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Чр╕▒р╣Ир╕зр╣Др╕Ы (User)</TestPinItem>
          <TestPinItem>тАв 111111 - р╕Ьр╕╣р╣Йр╕Чр╕Фр╕кр╕нр╕Ъ (Test)</TestPinItem>
        </TestPins>
      </LoginForm>
    </LoginContainer>
  );
}

export default Login;